{"/home/travis/build/npmtest/node-npmtest-generate-schema/test.js":"/* istanbul instrument in package npmtest_generate_schema */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generate-schema/lib.npmtest_generate_schema.js":"/* istanbul instrument in package npmtest_generate_schema */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generate_schema = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generate_schema = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generate-schema/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generate-schema && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generate_schema */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generate_schema\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generate_schema.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generate_schema.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generate_schema.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generate_schema.__dirname + '/lib.npmtest_generate_schema.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/index.js":"exports.generic = require('./schemas/generic')\nexports.mongoose = require('./schemas/mongoose')\nexports.bigquery = require('./schemas/bigquery')\nexports.mysql = require('./schemas/mysql')\nexports.json = require('./schemas/json')\n","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/schemas/generic.js":"// Modules\nvar Type = require('type-of-is')\nvar Utils = require('../utils')\n\nmodule.exports = function Process (object, output) {\n  output = output || {}\n\n  for (var key in object) {\n    var value = object[key]\n    var type = Type.string(value).toLowerCase()\n\n    if (type === 'undefined') {\n      type = 'null'\n    }\n\n    if (type === 'string' && Utils.isDate(value)) {\n      type = 'date'\n    }\n\n    if (type !== 'object') {\n      output[key] = {\n        type: type\n      }\n    } else {\n      output[key] = Process(object[key])\n      output[key].type = type\n    }\n  }\n\n  return output\n}","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/utils.js":"var DATE_REGEXP = /\\d{4}-\\d{2}-\\d{2}/\n\nexports.isNumber = function (value) {\n\treturn (typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]')\n}\n\nexports.isDate = function (date) {\n  return ((new Date(date).toString() !== 'Invalid Date' && !isNaN(new Date(date))))\n}\n\nexports.isTimestamp = function (string) {\n  return string.length > 18 && !isNaN((new Date(string)).getTime())\n}\n\nexports.isDateString = function (string) {\n  return string.match(DATE_REGEXP)\n}\n\nexports.arrayLastItem = function (arr) {\n  return arr[arr.length - 1]\n}\n","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/schemas/mongoose.js":"// Modules\nvar Type = require('type-of-is')\nvar Utils = require('../utils')\n\nfunction getNativeType (string) {\n  switch (string) {\n    case \"array\":\n      return 'Array'\n\n    case \"buffer\":\n      return 'Buffer'\n\n    case \"boolean\":\n      return 'Boolean'\n\n    case \"date\":\n      return 'Date'\n\n    case \"number\":\n      return 'Number'\n\n    case \"string\":\n      return 'String'\n\n    case \"objectid\":\n      return 'ObjectId'\n\n    case \"null\":\n    case \"undefined\":\n    case \"regexp\":\n    default:\n      return 'Mixed'\n  }\n}\n\nmodule.exports = function Process (object, output) {\n  var output = output || {}\n\n  for (var key in object) {\n    var value = object[key]\n    var originalType = null\n    var elementType = null\n    var type = null\n\n    if (value instanceof Buffer) {\n      type = 'buffer'\n    }\n\n    if (value != null && typeof value.toString !== 'undefined' && value.toString().match(/^[0-9a-fA-F]{24}$/)) {\n      type = 'objectid'\n    }\n\n    if (!type) {\n      type = Type.string(value).toLowerCase()\n    }\n\n    if (type === 'string' && Utils.isDate(value)) {\n      type = 'date'\n    }\n\n    if (type === 'object') {\n      output[key] = Process(object[key])\n    } else {\n      if (type === 'undefined') {\n        type = 'null'\n      }\n\n      if (type === 'array' && value.length) {\n        originalType = type\n        type = undefined\n\n        for (var index = 0, length = value.length; index < length; index++) {\n          elementType = Type.string(value[index]).toLowerCase()\n\n          if (type && elementType !== type) {\n            type = 'mixed'\n            break\n          } else {\n            type = elementType\n          }\n        }\n      }\n\n      if (originalType && originalType === 'array') {\n        output[key] = { type: [getNativeType(type)] }\n      } else {\n        output[key] = { type: getNativeType(type) }\n      }\n    }\n  }\n\n  return output\n}","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/schemas/bigquery.js":"var utils = require('../utils')\n\nfunction getPropertyMode (value) {\n  return Array.isArray(value) ? 'REPEATED' : 'NULLABLE'\n}\n\nfunction getPropertyType (value) {\n  if (Array.isArray(value)) {\n    return getPropertyType(value[0])\n  }\n\n  if (value instanceof Date) return 'TIMESTAMP'\n  if (typeof value === 'object') return 'RECORD'\n  if (typeof value === 'boolean') return 'BOOLEAN'\n  if (typeof value === 'string') {\n    if (utils.isDateString(value)) return 'DATE'\n    if (utils.isTimestamp(value)) return 'TIMESTAMP'\n  }\n\n  if (!isNaN(value)) {\n    return Number.isInteger(parseFloat(value)) ? 'INTEGER' : 'FLOAT'\n  }\n\n  return 'STRING'\n}\n\nfunction processFields (array, data) {\n  return Object.keys(data).map(function (key) {\n    var value = data[key]\n    var entry = {\n      name: key,\n      type: getPropertyType(data[key]),\n      mode: getPropertyMode(data[key])\n    }\n\n    if (entry.type === 'RECORD') {\n      entry.fields = processFields([], (entry.mode === 'REPEATED') ? value[0] : value)\n    }\n\n    return entry\n  })\n}\n\nmodule.exports = function Process (data) {\n  return processFields([], data)\n}\n","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/schemas/mysql.js":"// Modules\nvar Type = require('type-of-is')\nvar Utils = require('../utils')\n\n// Type Mapping\nvar types = {\n  boolean: 'BOOLEAN',\n  string: 'TEXT',\n  number: 'INT',\n  date: 'DATE',\n  timestamp: 'TIMESTAMP',\n  'regexp': 'TEXT',\n  'undefined': 'TEXT',\n  'null': 'TEXT'\n}\n\nvar lang = {\n  create: function (name) {\n    return ['CREATE TABLE ', name, ' ('].join('')\n  },\n\n  close: function () {\n    return ');'\n  },\n\n  id: function (name, value) {\n    return ['  ', name, '_id ', value, ','].join('')\n  },\n\n  property: function (name, value) {\n    return ['  ', name, ' ', value, ','].join('')\n  },\n\n  primary: function (id) {\n    return ['  PRIMARY KEY (', id, '),'].join('')\n  },\n\n  foreign: function (key1, table, key2) {\n    return ['  FOREIGN KEY (', key1, ') REFERENCES ', table, '(', key2, '),'].join('')\n  },\n}\n\nfunction processObject (obj, options) {\n  var name = options.tableName\n  var parent = options.parentTableName\n  var parentId = options.parentTableId\n  var parentIdType = options.parentTableIdType\n\n  // In-memory storage\n  var keys = Object.keys(obj)\n  var output = []\n  var tables = []\n\n  // Table variables\n  var id = null\n  var idType = 'string'\n\n  // Initialize Table\n  output.push(lang.create(name))\n\n  if (parent) {\n    output.push(lang.property(parent + '_' + parentId, types[parentIdType]))\n  }\n  \n  // Obtain ID\n  var nkey\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase() === 'id' || keys[i].toLowerCase().indexOf('_id') > -1) {\n      nkey = keys[i]\n      obj[nkey] = obj[keys[i]]\n      keys[i] = nkey\n      id = keys[i]\n      idType = typeof obj[keys[i]]\n    }\n  }\n\n  if (!id) {\n    id = 'id'\n    idType = parentIdType || idType\n    output.push(lang.property(id, types[idType]))\n  }\n\n  // Create table properties\n  var key, value, type\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i]\n    value = obj[key]\n    type = value instanceof Date\n      ? 'date'\n      : Type.string(value).toLowerCase()\n\n    if (type !== 'undefined') {\n      type = Utils.isTimestamp(value) ? 'timestamp' : type\n    }\n\n    if (type === 'function') {\n      continue\n    }\n    \n    // pojo\n    if (type === 'object' && !value.length) {\n      tables.push('')\n      tables.push(processObject(value, {\n        parentTableName: name,\n        parentTableId: id,\n        parentTableIdType: idType,\n        tableName: name + '_' + key\n      }).join('\\n'))\n      continue\n    }\n\n    // array\n    if (type === 'object' || type === 'array') {\n      if (typeof value[0] === 'object') {\n        tables.push('')\n        tables.push(processObject(value[0], {\n          parentTableName: name,\n          parentTableId: id,\n          parentTableIdType: idType,\n          tableName: name + '_' + key\n        }).join('\\n'))\n        continue      \n      }\n      \n      tables.push('')\n      tables.push(processObject({ \n        value: typeof value[0]\n      }, {\n        parentTableName: name,\n        parentTableId: id,\n        parentTableIdType: idType,\n        tableName: name + '_' + key\n      }).join('\\n'))\n\n      continue\n    }\n\n    output.push(lang.property(key, types[type]))\n  }\n\n  // Handle table keys\n  output.push(lang.primary(id))\n  \n  if (parent) {\n    output.push(lang.foreign(parent + '_id', parent, parentId))\n  }\n\n  output[output.length - 1] = Utils.arrayLastItem(output)\n    .substr(0, Utils.arrayLastItem(output).length - 1)\n\n  output.push(lang.close())\n\n  return output.concat(tables)\n}\n\nmodule.exports = function Process (tableName, object) {\n  if (typeof tableName !== 'string') {\n    object = tableName\n    tableName = 'generic'\n  }\n\n  return processObject(object, {\n    tableName: tableName\n  }).join('\\n')\n}\n","/home/travis/build/npmtest/node-npmtest-generate-schema/node_modules/generate-schema/src/schemas/json.js":"// Modules\nvar Type = require('type-of-is')\n\n// Constants\nvar DRAFT = 'http://json-schema.org/draft-04/schema#'\n\nfunction getPropertyFormat(value) {\n  var type = Type.string(value).toLowerCase()\n\n  if (type === 'date') return 'date-time'\n\n  return null\n}\n\nfunction getPropertyType(value) {\n  var type = Type.string(value).toLowerCase()\n\n  if (type === 'date') return 'string'\n  if (type === 'regexp') return 'string'\n  if (type === 'function') return 'string'\n\n  return type\n}\n\nfunction getUniqueKeys(a, b, c) {\n  a = Object.keys(a)\n  b = Object.keys(b)\n  c = c || []\n\n  var value\n  var cIndex\n  var aIndex\n\n  for (var keyIndex = 0, keyLength = b.length; keyIndex < keyLength; keyIndex++) {\n    value = b[keyIndex]\n    aIndex = a.indexOf(value)\n    cIndex = c.indexOf(value)\n\n    if (aIndex === -1) {\n      if (cIndex !== -1) {\n        // Value is optional, it doesn't exist in A but exists in B(n)\n        c.splice(cIndex, 1)\n      }\n    } else if (cIndex === -1) {\n      // Value is required, it exists in both B and A, and is not yet present in C\n      c.push(value)\n    }\n  }\n\n  return c\n}\n\nfunction processArray(array, output, nested) {\n  var format\n  var oneOf\n  var type\n\n  if (nested && output) {\n    output = { items: output }\n  } else {\n    output = output || {}\n    output.type = getPropertyType(array)\n    output.items = output.items || {}\n    type = output.items.type || null\n  }\n\n  // Determine whether each item is different\n  for (var arrIndex = 0, arrLength = array.length; arrIndex < arrLength; arrIndex++) {\n    var elementType = getPropertyType(array[arrIndex])\n    var elementFormat = getPropertyFormat(array[arrIndex])\n\n    if (type && elementType !== type) {\n      output.items.oneOf = []\n      oneOf = true\n      break\n    } else {\n      type = elementType\n      format = elementFormat\n    }\n  }\n\n  // Setup type otherwise\n  if (!oneOf && type) {\n    output.items.type = type\n    if (format) {\n      output.items.format = format\n    }\n  } else if (oneOf && type !== 'object') {\n    output.items = {\n      oneOf: [{ type: type }],\n      required: output.items.required\n    }\n  }\n\n  // Process each item depending\n  if (typeof output.items.oneOf !== 'undefined' || type === 'object') {\n    for (var itemIndex = 0, itemLength = array.length; itemIndex < itemLength; itemIndex++) {\n      var value = array[itemIndex]\n      var itemType = getPropertyType(value)\n      var itemFormat = getPropertyFormat(value)\n      var arrayItem\n      if (itemType === 'object') {\n        if (output.items.properties) {\n          output.items.required = getUniqueKeys(output.items.properties, value, output.items.required)\n        }\n        arrayItem = processObject(value, oneOf ? {} : output.items.properties, true)\n      } else if (itemType === 'array') {\n        arrayItem = processArray(value, oneOf ? {} : output.items.properties, true)\n      } else {\n        arrayItem = {}\n        arrayItem.type = itemType\n        if (itemFormat) {\n          arrayItem.format = itemFormat\n        }\n      }\n      if (oneOf) {\n        var childType = Type.string(value).toLowerCase()\n        var tempObj = {}\n        if (!arrayItem.type && childType === 'object') {\n          tempObj.properties = arrayItem\n          tempObj.type = 'object'\n          arrayItem = tempObj\n        }\n        output.items.oneOf.push(arrayItem)\n      } else {\n        if (output.items.type !== 'object') {\n          continue;\n        }\n        output.items.properties = arrayItem\n      }\n    }\n  }\n  return nested ? output.items : output\n}\n\nfunction processObject(object, output, nested) {\n  if (nested && output) {\n    output = { properties: output }\n  } else {\n    output = output || {}\n    output.type = getPropertyType(object)\n    output.properties = output.properties || {}\n  }\n\n  for (var key in object) {\n    var value = object[key]\n    var type = getPropertyType(value)\n    var format = getPropertyFormat(value)\n\n    type = type === 'undefined' ? 'null' : type\n\n    if (type === 'object') {\n      output.properties[key] = processObject(value, output.properties[key])\n      continue\n    }\n\n    if (type === 'array') {\n      output.properties[key] = processArray(value, output.properties[key])\n      continue\n    }\n\n    output.properties[key] = {}\n    output.properties[key].type = type\n\n    if (format) {\n      output.properties[key].format = format\n    }\n  }\n\n  return nested ? output.properties : output\n}\n\nmodule.exports = function Process (title, object) {\n  var processOutput\n  var output = {\n    $schema: DRAFT\n  }\n\n  // Determine title exists\n  if (typeof title !== 'string') {\n    object = title\n    title = undefined\n  } else {\n    output.title = title\n  }\n\n  // Set initial object type\n  output.type = Type.string(object).toLowerCase()\n\n  // Process object\n  if (output.type === 'object') {\n    processOutput = processObject(object)\n    output.type = processOutput.type\n    output.properties = processOutput.properties\n  }\n\n  if (output.type === 'array') {\n    processOutput = processArray(object)\n    output.type = processOutput.type\n    output.items = processOutput.items\n\n    if (output.title) {\n      output.items.title = output.title\n      output.title += ' Set'\n    }\n  }\n\n  // Output\n  return output\n}\n"}